git remote add origin https://github.com/tejasshah2k19/21-ocwcd-late.git

controller ??

java file -class 


controller --> servlet

class --> http 

thread --> 

class A extends Thread{
	public void run(){
	
	}
}
//servlet-api.jar 
class SignupServlet extends HttpServet{

	//service 
}
------------------------
jsp ==>  java server pages , java servlet page

	HTML + JAVA
	by default ==> html 
	
	java :-  
	 1)  java code 
	 		scriptlet => <%  %> 
	 2)  java - print 
	 		expression =>  <%=  %>
	
	
--------------------------------
Connection*

dmlCompiler --> syntax 
queryParser --> parse --> 
optimiser --> search 

Statement*--> insert into users (); -->
PreparedStatement*
CallableStatement-->plsql
--------------------------------------------

mysql -u root -p
 
create database  21advjava;
use 21advjava;

create table student (
	studentId integer primary key auto_increment,
	firstName varchar(20),
	email varchar(20),
	password varchar(20)
);
--------------------------------------------------------------------

__jdbc________ api we need to use if we want to perform sql queries using java? 


___driver__________  required in jdbc to communicate with database?

mysql -> mysql-connector.jar 


__url_____ ,___username_____ and ____password_______ attribute/property we need to set when we open connection using jdbc api?

___Connection_________ interface is used to hold connection object in java? 


_____PrepareStatement___________ interface help us to execute any sql query in database? 


____executeUpdate()_______ method is used to execulte any DML statement using preparestatement instance?

what is the return type of executeUpdate? ___int_____


__executeQuery()____________ method is used to execute any ready only query ?

what is the return type of executeQuery()? ___ResultSet________

--------------------------------------------------------------------
bean => container =>  hold ==> getters setters  => table 
--------------------------------------------------------------------





what is http ? 


what is servlet?

which method we need to override for servlet? 


____ and _____ are the argument of service method?
HttpServletRequest 
HttpServletResponse 


______________ interface is used to navigate from one node to another node.
RequestDispatcher 


__________ method is used to create PrintWriter instance for response in j2ee?
response.getWriter() 
getWriter() 


__jdbc________ api is used to communicate with sql database in java ? 

___________ method  is used to extract user input on server side ? 
getParameter()


_________ method is used to set data in request scope?
setAttribute() 


___bean_______ is POJO class who contains private/protected variable ?
plain old java object 


___client_______ and ____server______ are main entity in any j2ee application ?

____method____ attribute is used to change http request type in form ?



____GenericServlet class_______ is the parent of HttpServlet clasS? 

______servlet interface________ is parent of GenericSerlvet class ? 

____Servlet and IO____ exceptions are thrown by service method ?


__expression___ is used to print data on jsp ? 
<%= %> 

-----------------------------------------------------


FILTER 


filter --> 



request ---->   filter | server [ pre process ] 


Singup.jsp--> firstname email* password* -> submit --> request --> server  | process -> validation -> input

100 users --> 50 user data miss ---> 50  

-------------------------

icici --> Login.jsp -->  email|password  -->  filter | server  [ block -- pakistan ] 


-------------------------
whatsapp --> image ---> 35mb -->   
user1 --> 35mb image --> image -> compress --> 5 mb | whatsapp server --> user2 --->5mb ???

-------------------------
user1--> hi --->  filter | server | --> user2   
  
  
implementing filter 

1 class -> implements Filter [ filter interface ] 
2 override --> init doFilter[logic] destroy 
3 map your filter for servlet--server   
  
  
-->   
	InputMarks.jsp
				Maths
				Sci
				Eng 
						[  submit ] 
			
			filter 
						
server -->	CalculateResultServlet 
							
-------------------Filter invocation ----------------
<filter-name>FilterA</filter-name>
<servlet-name>RedServlet</servlet-name>

<filter-name>FilterB</filter-name>
<servlet-name>RedServlet</servlet-name>

<filter-name>FilterC</filter-name>
<url-pattern>/red/*</url-pattern>

<filter-name>FilterD</filter-name>
<url-pattern>/red/red/*</url-pattern>

<filter-name>FilterE</filter-name>
<url-pattern>*.red</url-pattern>


<servlet-name>RedServlet</servlet-name>
<url-pattern>/red/red/red/*</url-pattern>

<servlet-name>RedServlet</servlet-name>
<url-pattern>*.red</url-pattern>


aaa.red  => RedServlet [ E A B     ]  
red/aaa.red =>         [ C E A B   ] 
red/red/aaa.red =>     [ C D E A B ]   
red/red/red/  =>       [ C D A B ] 
red/red/red/aaa  =>    [ C D A B ] 
red/red/aaa     =>     [ C D | 404 ] 
aaa.ppt         =>     [ NONE | 404 ] 



---------------------------------------------------------------


we need to create student portal for students to access information of
 events,holidays,exams,and results.
 student can access information without login. 
 but admin has to login before managing events,exams..etc..
admin -->login --> Home.jsp [ add events , add holidays , manage events ] 
 
 we can have more than 1 admin in our site 
 1) local admin -->ServletConfig 
 2) global admin --->ServletContext
 
-------------------------------------------------------------------------------------
servletconfig ---> ServletConfig 
	1) init(ServletConfig config) 
	2) getServletConfig() 
	

servletcontext --> ServletContext
	1) getServletContext() 
-------------------------------------------------------------------------------------
	
	 
amazon -->    dhiraj sir --> fold 3 ->  order F3  
			  shyam sir  -->  iphone 12 ->  ip12 
			  nisarg sir -->  realme gt neo 2 ->  rgtn2 
			  
election


user --> card number ----->420           school --> book->card number -> 420 
client side 							server side 
										amazon server - dhiraj sir 1 , shyamsir 2 , nisarg sir 3 
ds -> 1 										
ss -> 2
ns -> 3 

token --> ns[3] ds[1] ss[2]          

server --> ns - 3 , ds - 1 , ss -2 

browser --> place order --> fold3 -> hidden --> token -> 1 
server ---> check token ?  token ?  dhiraj sir --> order fold 3 

browser --> view order -->  hidden --> token -> 1
server ---> check token? token ? dhiraj sir--> orders --> view 

http -> state less --> token 
     --> state full --> continues --> connection --> 
    	
developer 
-------------------------------------------------------------------------------------
user info ===> 
		privacy - security --> session 
		cookies 
		
		credit card
		
		
		1) session => server side => by server | server memory 
			17 mb 
			-> 1000 * 17 mb --> 17000 MB -> 1024 MB -> 1 gb -> 17 gb 
			-> ram -> 4 | 8 | 16 
			-> ram -> 1 gb 
			credit  card 			
		2) cookie  => client side =>           | browser 
			
-------------------------------------------------------------------------------------
HttpSession => session 

		HttpSession session = request.getSession(); 
		session.setAttribute("firstName",firstName); 
		
		500 users --> 500 session --> server's memory 
		
		logout? release? invalidate() --> destroy session instance from memory 
	
what if user does not click on logout? 
in-active --> 5 minutes 
session timeout 

1) programmatically[seconds]  -- java  session.setMaxInatctiveInterval(60*60*2);
2) configuration [ minutes]   ---  xml   <session-config> <session-timeout>2</session-timeout></session-config> 


-------------------------------------------------------------------------------------
listener 

	server start --> google api --open 
	server stop -->  api --close 

	500 users => count ? 
	session => listen --> session creation --> counter ++ 
				session destroy --> counter -- 
 
1) class --> logic [ SessionCounterListener  implements ????? ]
2) override all the methods 
3) configuration -> web.xml 


-------------------------------------------------------------------------------------

Login -> username and password -> store username in session so all the jsp page of 
our app will display message to the user 
	e.g    Good Morning , Ram 
	
username and password can be any , once user login , home page will display
home page contains 3 products with their image,price,name 

all products have addtocart link so user can add items on their cart. 

home page also have two hyperlinks 
1) view my cart 
2) logout 

view my cart hyperlink navigate user's to ViewMyCart Page , their you have to 
display all the products from the cart that is added  in home page by user. 

when user click on logout one servlet will call and release the memory of session.


**addition**
1) ArrayList for cart 

2) Qty can be decrease from view cart page 
3) print grand total of cart on view cart page 
 
-------------------------------------------------------------------------------------
storage ---> user info 

1) session -- server side --> secure -> server memory --> privacy ->  
2) cookie  -- client side --> open --> any one can access 


add? 
read?
expired? 
	<session-config>
			<session-timeout>
			
			</
	</

-------------------------------------------------------------------------------------
headers --> 
			request -> 
			response -> 
			
			client ---> request --> hidden --> [ fb.com , gmail.com ] js disable , zip , image , content gif png flv flash  
			server --> response --> hidden --> 

-------------------------------------------------------------------------------------
<html>

	<body>
		<h1>Welcome</h1> 
			custom-tag ---> user --> developer 

			j2ee--> standard tag lib -> jstl  
		<greet></greet> 
		<a>
		<time> </time> 
	</body> 
</html> 


good morning , tejas 


good evening , tejas 

jstl --> stdlib.jar 

	core tag -> if out import  choose catch forEach redirect  
	xml tag ->  parse when choose otherwise out set transform param 
	function tag -> 
	formatting tag -> 
	sql tag -> 
	
	
	1) download jst.jar 
	2) lib -> paste
	3) link -> java build path 
	4) import jsp using <%@taglib %>




---------------------------------------------------------------------------

JSP life cycle 

a.jsp 


1) translation a.jsp --> a.java 
2) compilation a.java --> a.class 
3) load class 
4) create instance 
5) init() -- jspInit()
6) service() -- _jspService() 
7) destroy() -- jspDestroy()

-------------------------------------------------------------------


Scope :-	page		-> this 
			request  	-> HttpServletRequest
			session     -> HttpSession 
			application -> ServletContext 



-------------------------------------------------------------------
EL function :-
		1) el function class--logic  	
		2) tld -> elfunc.tld [tag lib. descriptor ] 
		3) web.xml [ tld ]  
		4) jsp -- use 

usdconv(1200) 
usdconv(1600) 
-------------------------------------------------------------------
reusable web component :-	
						inclusion
								file -> file add 
						1) static inclusion
								<%@ include file="Footer.jsp" %>	
						2) dynamic inclusion 	
								<jsp:include page="Header.jsp"></jsp:include>
						
						
						
						header.jsp ->5 line->
						footer.jsp ->5 line-> 
						home.jsp ->5 line -> [ header footer ] 
						
						
						header.jsp 
							home content 
						footer.jsp 
						
-------------------------------------------------------------------

load class 
create instance 
init() 
service()*
destroy()


translation  [.jsp --> .java ] 
compilation  [.java --> .class ]
load class 
create instance 
init()  -- jspInit()
service()* -- _jspService()
destroy() -- jspDestroy() 


-------------------------------------------------------------------
url rewriting -- 











-------------------------------------------------------------------

usebean 

-------------------------------------------------------------------

custom tag:- jsp-api.jar 

1) SimpleTag -> interface --> SimpleTag -> SimpleTagSupport  
2) classicTag -> interface --> Tag  --> TagSupport -->
					Body
					Iter
					

simple tag :-	
			1) tag handler class->Logic 
			2) .tld -> tag library descriptor -> tag name ->class*
			3) map .tld -> web.xml 
			4) jsp use -> <%@taglib %> -> import  

<greet></greet> 

<sum n1="20" n2="30"></sum> 


-------------------------------------------------------------------




























